 카드게임
제한시간: 1Sec    메모리제한: 128mb해결횟수: 220회    시도횟수: 384회   

두 사람 A와 B는 1부터 10까지의 숫자가 하나씩 적힌 열 장의 카드로 ‘게임’을 한다. 게임은 총 열 번의 ‘라운드’로 구성되고, 각 라운드 마다 자신이 가지고 있는 카드 중 하나를 제시하고, 한 번 제시한 카드는 버린다. 게임 승패는 다음과 같이 결정된다.
 
1. 각 라운드는 더 높은 숫자를 제시한 사람이 승리하고, 제시한 숫자가 같은 경우는 비긴다.2. 열 번의 라운드에서 더 많은 라운드를 승리한 사람이 게임을 승리하고, 승리한 라운드 횟수가 동일한 경우 비긴다.
 
다음은 게임의 한 예로, 각 라운드마다 A와 B가 제시한 카드의 숫자와 각 라운드의 승자를 보여준다. (비긴 라운드는 D로 표시함)
 
 
 
A는 5번의 라운드에서 승리하고 B는 4번의 라운드에서 승리하였으므로, 이 게임은 A가 승리한다.
 
라운드 순서대로 A와 B가 제시한 카드의 숫자가 주어졌을 때, 게임의 승자를 판단하는 프로그램을 작성하시오.
 
다음 정보가 표준 입력으로 주어진다. 
첫 번째 줄에는 A가 제시한 카드의 숫자 10개가 라운드 순서대로 주어지고, 두 번째 줄에는 B가 제시한 카드의 숫자 10개가 라운드 순서대로 주어진다.

다음 정보를 표준 출력으로 출력한다. 게임의 승패가 결정되는 경우 승리한 사람을 출력하고, 비기는 경우에는 D를 출력한다.



 [Copy]
6 7 5 1 4 10 2 3 8 9
1 10 2 9 4 8 3 7 5 6
 [Copy]
A


 [Copy]
1 2 3 4 5 6 7 8 9 10
5 4 3 2 1 10 9 8 7 6
 [Copy]
D

자리배정
시간제한: 1 Sec  메모리제한: 64 MB제출: 313  해결: 88

어떤 공연장에는 가로로 C 개, 세로로 R 개의 좌석이 C × R 격자형으로 배치되어 있다. 각 좌석의 번호는 해당 격자의 좌표 (x,y) 로 표시된다.
예를 들어보자. 아래 그림은 가로 7개, 세로 6개 좌석으로 구성된 7 × 6 격자형 좌석배치를 보여주고 있다. 그림에서 각 단위 사각형은 개별 좌석을 나타내며, 그 안에 표시된 값 (x,y) 는 해당 좌석의 번호를 나타낸다. 가장 왼쪽 아래의 좌석번호는 (1,1)이며, 가장 오른쪽 위 좌석의 번호는 (7,6) 이다.

이 공연장에 입장하기 위하여 많은 사람이 대기줄에 서있다. 기다리고 있는 사람들은 제일 앞에서부터 1, 2, 3, 4, ... 순으로 대기번호표를 받았다. 우리는 대기번호를 가진 사람들에 대하여 (1,1) 위치 좌석부터 시작하여 시계방향으로 돌아가면서 비어있는 좌석에 관객을 순서대로 배정한다. 이것을 좀 더 구체적으로 설명하면 다음과 같다.
먼저 첫 번째 사람, 즉 대기번호 1인 사람은 자리 (1,1) 에 배정한다. 그 다음에는 위쪽 방향의 좌석으로 올라가면서 다음 사람들을 배정한다. 만일 더 이상 위쪽 방향으로 빈 좌석이 없으면 오른쪽으로 가면서 배정한다. 오른쪽에 더 이상 빈자리가 없으면 아래쪽으로 내려간다. 그리고 아래쪽에 더 이상 자리가 없으면 왼쪽으로 가면서 남은 빈 좌석을 배정한다. 이 후 왼쪽으로 더 이상의 빈 좌석이 없으면 다시 위쪽으로 배정하고, 이 과정을 모든 좌석이 배정될 때까지 반복한다.
아래 그림은 7 × 6 공연장에서 대기번호 1번부터 42번까지의 관객이 좌석에 배정된 결과를 보여주고 있다.

여러분은 공연장의 크기를 나타내는 자연수 C 와 R 이 주어져 있을 때, 대기 순서가 K 인 관객에게 배정될 좌석 번호 (x,y) 를 찾는 프로그램을 작성해야 한다.

입력파일의 이름은 input.txt로 한다.
입력파일의 첫 줄에는 공연장의 격자 크기를 나타내는 정수 C 와 R 이 하나의 공백을 사이에 두고 차례대로 주어진다. 두 값의 범위는 5 ≤ C, R ≤ 1,000 이다.
그 다음 줄에는 어떤 관객의 대기번호 K 가 주어진다. 단 1 ≤ K ≤ 100,000,000 이다.

출력파일의 이름은 output.txt이다.
여러분은 입력파일에 제시된 대기번호 K 인 관객에게 배정될 좌석번호 (x,y) 를 구해서 두 값, x와 y를 하나의 공백을 사이에 두고 출력해야 한다.
만일 모든 좌석이 배정되어 해당 대기번호의 관객에게 좌석을 배정할 수 없는 경우에는 0(숫자 영)을 출력해야 한다.


7 6
11

6 6



7 6 87
 0
 100 100 3000
 9 64
간지(干支)
시간제한: 1 Sec  메모리제한: 0 MB제출: 533  해결: 260

예로부터 동아시아에서는 십간(十干)과 십이지(十二支)를 사용하여 연도를 표시하였다. 십간은 “갑을병정무기경신임계”를 말하며 십이지는 “자축인묘진사오미신유술해”를 말한다. 십간과 십이지로 구성된 간지를 사용하여 60년을 주기로 각 연도에 다음과 같이 이름을 부여한다: 최초 1년째는 “갑자”이고, 2년째는 “을축”, 3년째는 “병인”과 같이 올해의 간지에서 십간과 십이지의 다음 문자를 이듬해의 간지로 사용한다. 십간은 10년을 주기로, 십이지는 12년을 주기로 순환된다. 이런순서로 하여 마지막 “계해”는 60년째를 나타내고, 61년째는 다시 “갑자”가 된다.
60갑자를 서양식으로 나타내기 위해
(1) 십간을 0부터 9까지의 정수로 표현하고 (2) 십이지를 “ABCDEFGHIJKL"로 표현하고 (3) 십간과 십이지의 순서를 바꾼다고 하자.
이를 서양식 간지 표현법이라고 부르자. 예를들면, “갑자”는 “A0”로 “을축”은 “B1”, “계해”는 “L9”으로 표현된다. 2013년은 계사년이므로 “F9”으로 표현되고, 2014년은 갑오년으로 “G0” 로 표현된다.
입력으로 주어진 연도를 서양식 간지 표현법으로 나타낸 것을 출력하는 프로그램을 작성하시오. 소스파일의 이름은 kanji.c 또는 kanji.cpp로 한다. 수행 시간은 1초를 넘을 수 없으며 부분점수는 없다.

입력파일의 이름은 input.txt로 한다. 모든 입력 파일은 한 줄에 연도를 나타내는 1개의 정수 N이 주어진다. 단, 1≤N≤1,000,000 이다.

출력파일의 이름은 output.txt이다. 입력으로 주어진 연도 N 을 서양식 간지 표현법으로 표현한 문자열을 한 줄에 출력한다. 2013년이 “F9”로 표현된다는 사실을 이용하시오.


2060

 E6





인공지능 시계
시간제한: 1 Sec  메모리제한: 0 MB제출: 958  해결: 395

KOI 전자에서는 건강에 좋고 맛있는 훈제오리구이 요리를 간편하게 만드는 인공지능 오븐을 개발하려고 한다. 인공지능 오븐을 사용하는 방법은 적당한 양의 오리 훈제 재료를 인공지능 오븐에 넣으면 된다. 그러면 인공지능 오븐은 오븐구이가 끝나는 시간을 초 단위로 자동적으로 계산한다.
또한, KOI 전자의 인공지능 오븐 앞면에는 사용자에게 훈제오리구이 요리가 끝나는 시각을 알려 주는 디지털 시계가 있다.
훈제오리구이를 시작하는 시각과 오븐구이를 하는 데 필요한 시간이 초 단위로 주어졌을 때, 오븐구이가 끝나는 시각을 계산하는 프로그램을 작성하시오.

입력 파일의 이름은 INPUT.TXT로 한다. 입력파일의 첫 째 줄에는 현재 시각이 나온다. 현재 시각은 시 A(0≤A≤23), 분 B(0≤B≤59)와 초 C(0≤C≤59) 가 정수로 빈칸을 사이에 두고 순서대로 주어진다. 두 번째 줄에는 요리하는 데 필요한 시간 D(0≤D≤500,000)가 초 단위로 주어진다.

출력 파일의 이름은 OUTPUT.TXT로 한다. 첫째 줄에 종료되는 시각의 시, 분, 초를 공백을 사이에 두고 출력한다. (단, 시는 0부터 23까지의 정수이며, 분, 초는 0부터 59까지의 정수이다. 디지털 시계는 23시 59분 59초에서 1초가 지나면 0시 0분 0초가 된다.)


14 30 0
200

14 33 20

17 40 45
6015

19 21 0


23 48 59
2515

0 30 54




지능형 기차 2
시간제한: 1 Sec  메모리제한: 32 MB제출: 1135  해결: 745

최근에 개발된 지능형 기차가 1번역(출발역)부터 10번역(종착역)까지 10개의 정차역이 있는 노선에서 운행되고 있다. 이 기차에는 타거나 내리는 사람 수를 자동으로 인식할 수 있는 장치가 있다. 이 장치를 이용하여 출발역에서 종착역까지 가는 도중 기차 안에 사람이 가장 많을 때의 사람 수를 계산하려고 한다. 단, 이 기차를 이용하는 사람들은 질서 의식이 투철하여, 역에서 기차에 탈 때, 내릴 사람이 모두 내린 후에 기차에 탄다고 가정한다.

예를 들어, 위와 같은 경우를 살펴보자. 이 경우, 기차 안에 사람이 가장 많은 때는 2번역에서 3명의 사람이 기차에서 내리고, 13명의 사람이 기차에 탔을 때로, 총 42명의 사람이 기차 안에 있다.
이 기차는 다음 조건을 만족하면서 운행된다고 가정한다. (1) 기차는 역 번호 순서대로 운행한다. (2) 출발역에서 내린 사람 수와 종착역에서 탄 사람 수는 0이다. (3) 각 역에서 현재 기차에 있는 사람보다 더 많은 사람이 내리는 경우는 없다. (4) 기차의 정원은 최대 10,000명이고, 정원을 초과하여 타는 경우는 없다.
10개의 역에 대해 기차에서 내린 사람 수와 탄 사람 수가 주어졌을 때, 기차에 사람이 가장 많을 때의 사람 수를 계산하는 프로그램을 작성하시오.

입력 파일의 이름은 INPUT.TXT로 한다. 각 역에서 내린 사람 수와 탄 사람 수가 빈칸을 사이에 두고 첫째 줄부터 열번째 줄까지 역 순서대로 한 줄에 하나씩 주어진다.

출력 파일의 이름은 OUTPUT.TXT로 한다. 첫째 줄에 최대 사람 수를 출력한다.


0 32
3 13
28 25
17 5
21 20
11 0
12 12
4 2
0 8
21 0

42





주사위 세개
시간제한: 1 Sec  메모리제한: 0 MB제출: 853  해결: 411

1에서부터 6까지의 눈을 가진 3개의 주사위를 던져서 다음과 같은 규칙에 따라 상금을 받는 게임이 있다.
규칙(1) 같은 눈이 3개가 나오면 10,000원+(같은 눈)*1,000원의 상금을 받게 된다. 규칙(2) 같은 눈이 2개만 나오는 경우에는 1,000원+(같은 눈)*100원의 상금을 받게 된다. 규칙(3) 모두 다른 눈이 나오는 경우에는 (그 중 가장 큰 눈)*100원의 상금을 받게 된다.
예를 들어, 3개의 눈 3, 3, 6이 주어지면 상금은 1,000+3*100으로 계산되어 1,300원을 받게 된다. 또 3개의 눈이 2, 2, 2로 주어지면 10,000+2*1,000 으로 계산되어 12,000원을 받게 된다. 3개의 눈이 6, 2, 5로 주어지면 그중 가장 큰 값이 6이므로 6*100으로 계산되어 600원을 상금으로 받게 된다.
3개 주사위의 나온 눈이 주어질 때, 상금을 계산하는 프로그램을 작성 하시오.

첫 째 줄에 3개의 눈이 빈칸을 사이에 두고 각각 주어진다.

첫째 줄에 게임의 상금을 출력 한다.


3 3 6

1300



입력 예 2 2 2 2
출력 예 2 12000
입력 예 3 6 2 5
출력 예 3  :  600
연속구간
시간제한: 1 Sec  메모리제한: 0 MB제출: 1124  해결: 362

여덟 자리의 양의 정수가 주어질 때, 그 안에서 연속하여 같은 숫자가 나오는 것이 없으면 1 을 출력하고, 있으면 같은 숫자가 연속해서 나오는 구간 중 가장 긴 것의 길이를 출력하는 프로그램을 작성하라.
예를 들어 세 개의 숫자 12345123, 17772345, 22233331 이 주어졌다고 하자. 12345123 은 연속하여 같은 숫자가 나오는 것이 없으므로 1을 출력하고, 17772345 는 7 이 세 개 연속하여 나오므로 3 을 출력하며, 22233331 의 경우에는 2 가 세 개, 3 이 네 개 연속해서 나오므로 그 중 큰 값인 4 를 출력하여야 한다.

첫째 줄부터 셋째 줄까지 각 줄에 하나씩 세 개의 여덟 자리 양의 정수가 주어진다.

첫째 줄에서 셋째 줄까지 한 줄에 하나씩 각 입력된 수 내에서 같은 숫자가 연속하여 나오는 가장 긴 길이를 입력 순서대로 출력한다.


12345123
17772345
22233331

134


점수계산
시간제한: 1 Sec  메모리제한: 0 MB제출: 682  해결: 404

OX 문제는 맞거나 틀린 두 경우의 답을 가지는 문제를 말한다. 여러 개의 OX 문제로 만들어진 시험에서 연속적으로 답을 맞히는 경우에는 가산점을 주기 위해서 다음과 같이 점수 계산을 하기로 하였다. 1번 문제가 맞는 경우에는 1점으로 계산한다. 앞의 문제에 대해서는 답을 틀리다가 답이 맞는 처음 문제는 1점으로 계산한다. 또한, 연속으로 문제의 답이 맞는 경우에서 두 번째 문제는 2점, 세 번째 문제는 3점, ..., K번째 문제는 K점으로 계산한다. 틀린 문제는 0점으로 계산한다.
예를 들어, 아래와 같이 10 개의 OX 문제에서 답이 맞은 문제의 경우에는 1로 표시하고, 틀린 경우에는 0으로 표시하였을 때, 점수 계산은 아래 표와 같이 계산되어, 총 점수는 1+1+2+3+1+2=10 점이다.
 

시험문제의 채점 결과가 주어졌을 때, 총 점수를 계산하는 프로그램을 작성하시오.

첫째 줄에 문제의 개수 N (1≤N≤100)이 주어진다. 둘째 줄에는 N개 문제의 채점 결과를 나타내는 0 혹은 1이 빈 칸을 사이에 두고 주어진다. 0은 문제의 답이 틀린 경우이고 1은 문제의 답이 맞는 경우이다.

첫째 줄에 입력에서 주어진 채점 결과에 대하여 가산점을 고려한 총 점수를 출력한다.


10 
1 0 1 1 1 0 0 1 1 0

10

최댓값
시간제한: 1 Sec  메모리제한: 32 MB  Special Judge제출: 1143  해결: 757

<그림 1>과 같이 9×9 격자판에 쓰여진 81개의 자연수가 주어질 때, 이들 중 최댓값을 찾고 그 최댓값이 몇 행 몇 열에 위치한 수인지 구하는 프로그램을 작성하시오.
예를 들어, 다음과 같이 81개의 수가 주어지면

이들 중 최댓값은 90이고, 이 값은 5행 7열에 위치한다.

첫 째 줄부터 아홉 번째 줄까지 한 줄에 아홉 개씩 자연수가 주어진다. 주어지는 자연수는 100보다 작다.

첫째 줄에 최댓값을 출력하고 둘째 줄에 최댓값이 위치한 행 번호와 열 번호를 빈칸을 사이에 두고 차례로 출력한다. 최댓값이 두 개 이상인 경우 그 중 한 곳의 위치를 출력한다.


3 23 85 34 17 74 25 52 65
10 7 39 42 88 52 14 72 63
87 42 18 78 53 45 18 84 53
34 28 64 85 12 16 75 36 55
21 77 45 35 28 75 90 76 1
25 87 65 15 28 11 37 28 74
65 27 75 41 7 89 78 64 39
47 47 70 45 23 65 3 41 44
87 13 82 38 31 12 29 29 80

90
5 7

소수
시간제한: 1 Sec  메모리제한: 64 MB제출: 1827  해결: 589

자연수 M과 N이 주어질 때 M이상 N이하의 자연수 중 소수인 것을 모두 골라 이들 소수의 합과 최소값을 찾는 프로그램을 작성하시오.
예를 들어 M=60, N=100이 경우 60이상 100이하의 자연수 중 소수는 61, 67, 71, 73, 79, 83, 89, 97 총 8개가 있으므로, 이들 소수의 합은 620이고, 최소값은 61이 된다.

입력의 첫째 줄에 M이, 둘째 줄에 N이 주어진다.M과 N은 10,000이하의 자연수이며, M은 N보다 같거나 작다.

M이상 N이하의 자연수 중 소수인 것을 모두 찾아 첫째 줄에 그 합을, 둘째 줄에 그 중 최소값을 출력한다. 단, M이상 N이하의 자연수 중 소수가 없을 경우는 첫째 줄에 -1을 출력한다.


60
100

620
61

대표값
시간제한: 1 Sec  메모리제한: 32 MB제출: 1333  해결: 652

어떤 수들이 있을 때, 그 수들을 대표하는 값으로 가장 흔하게 쓰이는 것은 평균이다. 평균은 주어진 모든 수의 합을 수의 개수로 나눈 것이다. 예를 들어 10, 40, 30, 60, 30, 20, 60, 30, 40, 50의 평균은
 이 된다.
평균 이외의 또 다른 대표값으로 최빈값이라는 것이 있다. 최빈값은 주어진 수들 가운데 가장 많이 나타나는 수이다. 예를 들어 10, 40, 30, 60, 30, 20, 60, 30, 40, 50 이 주어질 경우,
30 이 세 번,40 과 60 이 각각 두 번,10, 20, 50 이 각각 한 번씩 나오므로, 최빈값은 30 이 된다.
열 개의 자연수가 주어질 때 이들의 평균과 최빈값을 구하는 프로그램을 작성하시오.

첫째 줄부터 열 번째 줄까지 한 줄에 하나씩 자연수가 주어진다. 주어지는 자연수는 1,000 보다 작은 10 의 배수이다.

첫째 줄에는 평균을 출력하고 둘째 줄에는 최빈값을 출력한다. 최빈값이 둘 이상일 경우 그 중 하나만 출력한다. 평균과 최빈값은 모두 자연수이다.


10
40
30
60
30
20
60
30
40
50

37
30





최대공약수와최소공배수
시간제한: 1 Sec  메모리제한: 64 MB제출: 1581  해결: 807

두개의 자연수를 입력받아 최대 공약수와 최소 공배수를 출력하는 프로그램을 작성하시오.

입력 파일의 첫째 줄에는 두 개의 자연수가 주어진다. 이 둘은 10,000이하의 자연수이며 사이에 한 칸의 공백이 주어진다.

첫째 줄에는 입력으로 주어진 두 수의 최대공약수를 둘째 줄에는 입력으로 주어진 두 수의 최소 공배수를 출력한다.


24 18

672

//
유클리드 호제법(Euclidean algorithm) : 
 A를 B로 나눈 나머지가 r이라면 A와 B의 최대공약수는 B와 r의 최대공약수와 같다.   
GCD(A, B) = GCD(B, r)
이 원리를 이용하면 두 수의 최대공약수를 간단하게 구할 수 있다. 
이 방법으로 30과 18의 최대공약수를 구하는 과정을 살펴보면 다음과 같다.
GCD(30, 18) = GCD(18, 12) = GCD(12, 6) = 6
 * 30을 18로 나눈 나머지는 12, 18을 12로 나눈 나머지는 6, 12를 6으로 나눈 나머지는 0이므로, 30과 18의 최대공약수는 12와 6의 최대공약수인 6과 같다.
코드3
 01    int gcd_get(int x, int y)
 02    {
 03          if(x % y == 0) return y;    // 나머지가 0이면 y가 최대공약수이다.
04          return (y, x % y);          // x와 y의 최대공약수는 y와 x % y 의 최대공약수와 같다.
05    }